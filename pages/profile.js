import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useContext, useState, useEffect } from 'react';

// auth
import AuthCheck from '../components/AuthCheck';
import { auth, firestore } from '../lib/auth/firebase';
import { useDocumentData, useCollectionData, useCollection } from 'react-firebase-hooks/firestore'
import { UserContext } from '../lib/auth/context';
import AdminPanel from '../components/AdminPanel';

export default function Home() {
  const { user, userData } = useContext(UserContext);
  const [isSSR, setIsSSR] = useState(true);

  useEffect(() => {
    setIsSSR(false);
  }, []);

  return (
    !isSSR &&
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>


        <AuthCheck>
          <Greeting />
          <hr />
          <h3>Спортсмены</h3>
          <Athletes />
          <AdminPanel
            user={user}
            userData={userData}
          />
          {
            userData.isJudge &&
            <span>Судья</span>
          }
        </AuthCheck>
      </main>
    </div>
  )
}


function Greeting() {
  const ref = firestore.collection('users').doc(auth.currentUser.uid);
  const [info, infoLoading] = useDocumentData(ref);

  return (
    <>
      {info && <h1>Привет, {info.name}</h1>}
      {infoLoading && <p>Загрузка...</p>}
    </>
  )

}

function Athletes() {
  const ref = firestore.collection('users').doc(auth.currentUser.uid);
  const [info, infoLoading] = useDocumentData(ref);

  const [hide, setHide] = useState(true);
  const [message, setMessage] = useState('');

  const [name, setName] = useState('');
  const [surname, setSurname] = useState('');
  const [patronymic, setPatronymic] = useState('');
  const [club, setClub] = useState('');
  const [bikeNumber, setBikeNumber] = useState('');
  const [city, setCity] = useState('');

  return (
    <>
      {info &&
        <>
          {info.athletes.map(a => <Athlete refPath={a} />)}
          <div
            style={{ display: hide ? 'none' : 'block' }}
          >
            <input
              id="surname"
              placeholder="Фамилия"
              type="text"
              onChange={(e) => setSurname(e.target.value)}
            />
            <input
              id="name"
              placeholder="Имя"
              type="text"
              onChange={(e) => setName(e.target.value)}

            />
            <input
              id="patronymic"
              placeholder="Отчество"
              type="text"
              onChange={(e) => setPatronymic(e.target.value)}

            />
            <br />
            <input
              id="club"
              placeholder="Клуб"
              type="text"
              onChange={(e) => setClub(e.target.value)}
            />
            <input
              id="city"
              placeholder="Город"
              type="text"
              onChange={(e) => setCity(e.target.value)}
            />
            <br />
            <input
              id="bikeNumber"
              placeholder="Номер велосипеда"
              type="number"
              onChange={(e) => setBikeNumber(parseInt(e.target.value))}
            />
            <br />
            <button
              onClick={async (e) => {
                e.preventDefault();
                let athleteObj = {
                  name: name,
                  surname: surname,
                  patronymic: patronymic,
                  club: club,
                  city: city,
                  bikeNumber: bikeNumber
                }
                await firestore
                  .collection('athletes')
                  .add(athleteObj)
                  .catch(function (error) {
                    setMessage(error.message);
                  })
                  .then(async (docRef) => {
                    let oldAthletes = info.athletes;
                    oldAthletes.push(docRef);
                    await ref.update({
                      "athletes": oldAthletes
                    })
                    .catch(e => {
                      setMessage(e.message);
                    })
                  })
                setHide(true);
                setName('');
                setSurname('');
                setPatronymic('')
                setCity('');
                setBikeNumber('');
                setClub('');
              }}
            >
              Добавить
            </button>
            <button
              onClick={(e) => {
                setHide(true)
              }}
            >
              Отмена
            </button>
          </div>
          <br />
          <button
            onClick={(e) => {
              setHide(false)
            }}
            style={{ display: hide ? 'block' : 'none' }}
          >
            +
          </button>
          {message}
        </>
      }
      {infoLoading && <p>Загрузка...</p>}
    </>
  )

}

function Athlete(props) {
  const [info, infoLoading] = useDocumentData(props.refPath);

  return (
    <>
      {info && <p>{info.surname} {info.name} {info.patronymic}</p>}
      {infoLoading && <p>Загрузка...</p>}
    </>
  )

}